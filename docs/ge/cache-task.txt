Hello Ionut.

We have the following mandatory requirements for the task:
*  The cache should natively support the Peer to Peer full replication cache.
*  The cache should natively support transactions (atomic/consistent).
*  The cache should natively support synchronous replication (atomic/consistent).
*  The cache should have Apache 2.0 license (or better)

I have found the following options which are meet our requirements:
I have ordered the list of options form must prefer.

1. Infinispan 13.0.10
    pros:
        It natively supports the Peer to Peer full replication cache.
        It natively supports transactions (atomic/consistent).
        It natively supports synchronous replication (atomic/consistent).
        It supports JCache JSR 107.
        It can be run in the same JVM (embedded).
    cons:
        It does not natively support replication via JMS. It uses JGroups via TCP.
        It does not scale well with write operations due to synchronous replication.

2. Ehcache 2.x
    pros:
        It natively supports the Peer to Peer full replication cache.
        It natively supports transactions (atomic/consistent).
        It natively supports synchronous replication (atomic/consistent).
        It supports JCache JSR 107.
        It can be run in the same JVM (embedded).
        It is already integrated into our application.
        It natively supports replication via JMS.
    cons:
        Ehcache does not support atomic operations in peer-to-peer mode
        It does not scale well with write operations due to synchronous replication.

The following options do not meet our requirements:

* Guava                                 - It does not supports clustered environments out of the box.
* Caffeine                              - It does not supports clustered environments out of the box.
* Java Caching System                   - It does not support transactions out of the box.
* Ehcache 3.x without Terracotta Server - It does not support clustered environment out of the box.
* Ehcache 3.x with Terracotta Server    - It is required to install a standalone Terracotta Server.
* Ehcache Enterprise                    - It has a commercial license.
* Hazelcast                             - It does not support full replication cache in synchronous mode. (It is Distributed Hash Table).
* Hazelcast Enterprise edition          - It has a commercial license.
* Oracle Coherence Standard             - It has a commercial license.
* Oracle Coherence Enterprise           - It has a commercial license.
* Oracle Coherence Grid                 - It has a commercial license.

We have a few additional options.
But I don't sure we should look at it due to its significant complexity.

* Oracle Coherence Community Edition
* Apache Ignite
* Apache Geode

Also, I want to propose the following approach to improve overall system performance.
We can use an in-memory data grid to store and process the frequency used data (schedule for last month).

The proposal is based on the following assumptions:
Due to my experiences of using our system, the main bottleneck is on the database level (schedule/schedule values)
I have the following assumption about data usage in our system:
    * The must frequency use schedule for the last day or two in the BPMN process.
    * The next frequency use is schedules for last month in the derivations
    * The most time-sensitive process is the RTBM process and a derivation from it.






